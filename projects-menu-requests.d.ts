/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   projects-menu-requests.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../http-method-label/http-method-label.d.ts" />
/// <reference path="../paper-toast/paper-toast.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-item/paper-item-body.d.ts" />
/// <reference path="../paper-ripple/paper-ripple.d.ts" />
/// <reference path="../requests-list-mixin/requests-list-mixin.d.ts" />
/// <reference path="../requests-list-mixin/requests-list-styles.d.ts" />
/// <reference path="../uuid-generator/uuid-generator.d.ts" />

declare namespace UiElements {

  /**
   * A list of requests related to a project in the ARC main menu.
   *
   * The element requires the `arc-models/project-model` element to be present
   * in the DOM to update requests order.
   *
   * ### Example
   *
   * ```
   * <projects-menu-requests
   *  project-id="some-id"
   *  selected-request="id-of-selected"></projects-menu-requests>
   * ```
   *
   * ### Styling
   * `<saved-menu>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--projects-menu-requests` | Mixin applied to the element | `{}`
   * `--projects-menu-requests-background-color` | Background color of the menu | `#f7f7f7`
   * `--projects-menu-requests-selected-method-label-background-color` | Background color of the POST method label when the item is focused | `#fff`
   * `--projects-menu-requests-list-item` | Mixin applied to each list item | `{}`
   * `--projects-menu-requests-selected-item-background-color` | Background color of the selected list item | `#FF9800`
   * `--projects-menu-requests-selected-item-color` | Color of the selected list item | `#fff`
   * `--projects-menu-requests-name-label` | Mixin applied to the name label | `{}`
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   * `--error-toast` | Mixin applied to the error toast | `{}`
   */
  class ProjectsMenuRequests extends
    ArcComponents.RequestsListMixin(
    Object) {

    /**
     * True if the element currently is querying the datastore for the data
     */
    querying: boolean|null|undefined;

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;
    _isAttached: boolean|null|undefined;

    /**
     * Enables the comonent to accept drop action with a request.
     */
    draggableEnabled: boolean|null|undefined;
    noink: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _draggableChanged(value: any): void;
    _addDndEvents(): void;
    _removeDndEvents(): void;

    /**
     * Queries for the data when state or `projectId` changes
     *
     * @param isAttached Current valiue of `_isAttached`
     */
    _queryData(projectId: String|null, isAttached: Boolean|null): void;

    /**
     * Computes value for the `dataUnavailable` property.
     */
    _computeDataUnavailable(hasRequests: Boolean|null, querying: Boolean|null): Boolean|null;

    /**
     * Called when the user clicks on an item in the UI
     */
    _openHandler(e: ClickEvent|null): void;

    /**
     * Removes drop pointer from shadow root.
     */
    _removeDropPointer(): void;

    /**
     * Removes drop pointer to shadow root.
     *
     * @param ref A list item to be used as a reference point.
     */
    _createDropPointer(ref: Element|null): void;

    /**
     * Handler for `dragover` event on this element. If the dagged item is compatible
     * it renders drop message.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Computes value fro `dropEffect` property of the `DragEvent`.
     *
     * @returns Either `copy` or `move`.
     */
    _computeDropEffect(e: DragEvent|null): String|null;

    /**
     * Handler for `dragleave` event on this element.
     */
    _dragleaveHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to saved requests.
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Handles logic when drop event is `move` in effect.
     * Removes reference to old project (if exists). It uses `arc-source/project-detail`
     * data from event which should hold project ID.
     *
     * @param request Request object
     * @returns True if the request object changed.
     */
    _handleMoveDrop(e: DragEvent|null, request: object|null): Boolean|null;

    /**
     * Updates project and request objects and inserts the request at a position.
     *
     * @param index The position in requests order
     * @param request Request to update
     * @param forceRequestUpdate Forces update on request object even
     * when position hasn't change.
     */
    _insertRequestAt(index: Number|null, request: object|null, forceRequestUpdate: Boolean|null): Promise<any>|null;
    _dispatchProjectChanged(project: any): any;

    /**
     * Handler for the `dragstart` event added to the list item when `draggableEnabled`
     * is set to true.
     * This function sets request data on the `dataTransfer` object with `arc/request-object`
     * mime type. The request data is a serialized JSON with request model.
     */
    _dragStart(e: Event|null): void;

    /**
     * Handles `dragend` event dispatched when the drag operation is over.
     * Restores ripple effects.
     */
    _dragEnd(): void;

    /**
     * Sets `noink` property that is propagated to each `paper-ripple` element
     * and terminates any running animation.
     * This function is used by `dragstart` event handler to remove ripples
     * which causes the dragged image to be bigger than it really is.
     */
    disableRippling(): void;

    /**
     * Computes value for the `draggable` property of the list item.
     * When `draggableEnabled` is set it returns true which is one of the
     * conditions to enable drag and drop on an element.
     *
     * @param draggableEnabled Current value of `draggableEnabled`
     * @returns `true` or `false` (as string) depending on the argument.
     */
    _computeDraggableValue(draggableEnabled: Boolean|null): String|null;
  }
}

interface HTMLElementTagNameMap {
  "projects-menu-requests": UiElements.ProjectsMenuRequests;
}
