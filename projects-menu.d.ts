/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   projects-menu.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/utils/render-status.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-item/paper-item-body.d.ts" />
/// <reference path="../paper-item/paper-item.d.ts" />
/// <reference path="../paper-ripple/paper-ripple.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../iron-icon/iron-icon.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../projects-list-consumer-mixin/projects-list-consumer-mixin.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-menu-button/paper-menu-button.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../uuid-generator/uuid-generator.d.ts" />
/// <reference path="../paper-styles/shadow.d.ts" />
/// <reference path="projects-menu-requests.d.ts" />

declare namespace UiElements {

  /**
   * A list of projects in the ARC main menu.
   *
   * The element uses direct implementation of the PouchDB to make a query to the
   * datastore. It also listens to events fired by the `arc-model` elements to
   * update state of the saved items.
   *
   * ### Example
   *
   * ```html
   * <projects-menu
   *  selected-project="project-id"
   *  selected-request="id-of-selected-request"></projects-menu>
   * ```
   * ### Styling
   * `<saved-menu>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--projects-menu` | Mixin applied to the element | `{}`
   * `--projects-menu-background-color` | Background color of the menu | `#f7f7f7`
   * `--projects-menu-selected-method-label-background-color` | Background color of the POST method label when the item is focused | `#fff`
   * `--projects-menu-list` | Mixin applied to the list element. | `{}`
   * `--projects-menu-list-item` | Mixin applied to each list item | `{}`
   * `--projects-menu-selected-item-background-color` | Background color of the selected list item | `rgba(255, 152, 0, 0.24)`
   * `--projects-menu-name-label` | Mixin applied to the name label | `{}`
   * `--projects-menu-project-icon-color` | Color of the "project" icon | `rgba(0, 0, 0, 0.64)`
   * `--projects-menu-selected-project-icon-color` | Color of the "project" icon when selected | `#F57C00`
   * `--arc-menu-empty-info-color` | Color applied to the empty info section | ``
   * `--arc-menu-empty-info-title-color` | Color applied to the title in the empty info section | ``
   * `--projects-menu-open-icon-color` | Color of the open project icon | `{}`
   * `--context-menu-item-color` | Color of the context menu item | ``
   * `--context-menu-item-background-color` | Background color of the context menu item | ``
   * `--context-menu-item-color-hover` | Color of the context menu item when hovered | ``
   * `--context-menu-item-background-color-hover` | Background color of the context menu item when hovered | ``
   */
  class ProjectsMenu extends
    ArcComponents.ProjectsListConsumerMixin(
    Object) {

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;

    /**
     * Changes information density of list items.
     * By default it uses material's peper item with two lines (72px heigth)
     * Possible values are:
     *
     * - `default` or empty - regular list view
     * - `comfortable` - enables MD single line list item vie (52px heigth)
     * - `compact` - enables list that has 40px heigth (touch recommended)
     */
    listType: string|null|undefined;

    /**
     * Enables the comonent to accept drop action with a request.
     */
    draggableEnabled: boolean|null|undefined;

    /**
     * A timeout after which the project item is opened when dragging a
     * request over.
     */
    dragOpenTimeout: number|null|undefined;
    connectedCallback(): void;

    /**
     * Computes value for the `dataUnavailable` property.
     */
    _computeDataUnavailable(hasProjects: Boolean|null): Boolean|null;

    /**
     * Computes command label depending on a OS.
     * For Mac it will be cmd + `key` and for the rest of the World it
     * will be ctrl + `key`.
     *
     * @param key The key combination as a sufix after the command key
     * @param platform Current platform name. `navigator.platform` is used by default.
     * @returns Full command to display in command label.
     */
    _computeA11yCommand(key: String|null, platform: String|null): String|null;

    /**
     * Toggles opened project details.
     */
    _toggleOpen(e: ClickEvent|null): void;

    /**
     * Updates icon size CSS variable and notifies resize on the list when
     * list type changes.
     */
    _updateListStyles(type: String|null): void;
    _cancelEvent(e: any): void;

    /**
     * Cancels click event when "more" button is clicked.
     */
    _moreClickHandler(e: ClickEvent|null): void;

    /**
     * Closes paper-listbox holding menu items.
     */
    _deselectMenuOption(e: ClickEvent|null): void;

    /**
     * Handler for the click event "open all" menu item.
     */
    _openAllRequests(e: ClickEvent|null): void;

    /**
     * Handler for the click event "replace all" menu item.
     */
    _replaceAllRequests(e: ClickEvent|null): void;

    /**
     * Dispatches `workspace-open-project-requests` event end returns it.
     *
     * @param project Project object
     * @param replace When true the requests are to be replaced in the workspace.
     */
    _dispatchOpenRequests(project: object|null, replace: Boolean|null): CustomEvent|null;

    /**
     * Handler for the click event "details" menu item.
     * Dispatches "navigate" event
     */
    _openProject(e: ClickEvent|null): void;
    _stopEvent(e: any): void;

    /**
     * Handler for `dragover` event on this element.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Computes value for `dropEffect` property of the `DragEvent`.
     *
     * @returns Either `copy` or `move`.
     */
    _computeDropEffect(e: DragEvent|null): String|null;

    /**
     * Handler for `dragleave` event on project node.
     */
    _dragleaveHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to the project
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Cancels the timer set in the dragover event
     */
    _cancelDragTimeout(): void;

    /**
     * Opens the project from the draggable event.
     */
    _openProjectDragOver(): void;

    /**
     * Adds dropped request to a project.
     *
     * @param project Project model
     * @param request Request model
     */
    _appendRequest(project: object|null, request: object|null): Promise<any>|null;

    /**
     * Dispatches `project-object-changed` custom event and returns it.
     *
     * @param project Updated project to store.
     * @returns Disaptched custom event
     */
    _dispatchProjectChanged(project: object|null): CustomEvent|null;

    /**
     * Dispatches `process-error` so the application can notify user about the event.
     *
     * @param cause Error object
     * @returns Disaptched custom event
     */
    _dispatchProcessError(cause: Error|null): CustomEvent|null;

    /**
     * Dispatches bubbling and composed custom event.
     * By default the event is cancelable until `cancelable` property is set to false.
     *
     * @param type Event type
     * @param detail A detail to set
     * @param cancelable True if the event is cancelable (default value).
     */
    _dispatch(type: String|null, detail: any|null, cancelable: Boolean|null): CustomEvent|null;

    /**
     * Handler for the `dragstart` event added to the list item when `draggableEnabled`
     * is set to true.
     * This function sets request data on the `dataTransfer` object with `arc/request-object`
     * mime type. The request data is a serialized JSON with request model.
     */
    _dragStart(e: Event|null): void;

    /**
     * Computes value for the `draggable` property of the list item.
     * When `draggableEnabled` is set it returns true which is one of the
     * conditions to enable drag and drop on an element.
     *
     * @param draggableEnabled Current value of `draggableEnabled`
     * @returns `true` or `false` (as string) depending on the argument.
     */
    _computeDraggableValue(draggableEnabled: Boolean|null): String|null;
  }
}

interface HTMLElementTagNameMap {
  "projects-menu": UiElements.ProjectsMenu;
}
