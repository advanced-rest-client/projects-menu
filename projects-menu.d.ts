/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   projects-menu.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-item/paper-item-body.d.ts" />
/// <reference path="../paper-ripple/paper-ripple.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../iron-icon/iron-icon.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="projects-menu-requests.d.ts" />

declare namespace UiElements {

  /**
   * A list of projects in the ARC main menu.
   *
   * The element uses direct implementation of the PouchDB to make a query to the
   * datastore. It also listens to events fired by the `arc-model` elements to
   * update state of the saved items.
   *
   * ### Example
   *
   * ```
   * <projects-menu selected-project="project-id" selected-request="id-of-selected-request"></projects-menu>
   * ```
   * ### Styling
   * `<saved-menu>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--projects-menu` | Mixin applied to the element | `{}`
   * `--projects-menu-background-color` | Background color of the menu | `#f7f7f7`
   * `--projects-menu-selected-method-label-background-color` | Background color of the POST method label when the item is focused | `#fff`
   * `--projects-menu-list` | Mixin applied to the list element. | `{}`
   * `--projects-menu-list-item` | Mixin applied to each list item | `{}`
   * `--projects-menu-selected-item-background-color` | Background color of the selected list item | `rgba(255, 152, 0, 0.24)`
   * `--projects-menu-name-label` | Mixin applied to the name label | `{}`
   * `--projects-menu-project-icon-color` | Color of the "project" icon | `rgba(0, 0, 0, 0.64)`
   * `--projects-menu-selected-project-icon-color` | Color of the "project" icon when selected | `#F57C00`
   * `--arc-menu-empty-info-color` | Color applied to the empty info section | ``
   * `--arc-menu-empty-info-title-color` | Color applied to the title in the empty info section | ``
   * `--projects-menu-open-icon-color` | Color of the open project icon | `{}`
   */
  class ProjectsMenu extends Polymer.Element {

    /**
     *  Returns a handler to the datastore instance
     */
    readonly _db: any;

    /**
     * Saved items restored from the datastore.
     */
    items: any[]|null|undefined;

    /**
     * True when the element is querying the database for the data.
     */
    readonly querying: boolean|null|undefined;

    /**
     * Computed value, true if the `items` property has values.
     */
    readonly hasItems: boolean|null|undefined;

    /**
     * Database query options for pagination.
     * Override this value to change the query options like limit of the results in one call.
     *
     * This is query options passed to the PouchDB `allDocs` function. Note that it will not
     * set `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property
     * and the directive will be added automatically.
     */
    readonly queryOptions: object|null|undefined;

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;

    /**
     * Currently selected project ID
     */
    selectedProject: string|null|undefined;

    /**
     * Currently selected request ID
     */
    selectedRequest: string|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Resets the state of the variables.
     */
    reset(): void;

    /**
     * Refreshes the data from the datastore.
     * It resets the query options, clears items and makes a query to the datastore.
     */
    refresh(): void;

    /**
     * Handler for the `datastore-destroyed` custom event
     */
    _onDatabaseDestroy(e: CustomEvent|null): void;

    /**
     * Computes class name for the HTML element representing a saved item.
     */
    _computeItemClass(_id: any, selectedProject: any): any;

    /**
     * Computes value for the `hasItems` property.
     */
    _computeHasItems(length: any): any;

    /**
     * The function to call when new query for data is needed.
     */
    makeQuery(): void;

    /**
     * Performs the query and processes the result.
     */
    _loadPage(): void;

    /**
     * Handler for the `project-object-changed` event.
     */
    _projectChanged(e: any): any;

    /**
     * Handler for `project-object-deleted` event.
     * Removes project from the list.
     */
    _projectDeleted(e: CustomEvent|null): void;

    /**
     * Appends a list of project objects to the list
     *
     * @param items List of projects
     */
    appendItems(items: any[]|null): void;

    /**
     * Sorts projects list by `order` property.
     *
     * @param list List of projects objects
     * @returns Sorted list of projects
     */
    _prepareData(list: any[]|null): any[]|null;

    /**
     * Computes value for the `dataUnavailable` property.
     */
    _computeDataUnavailable(hasItems: any, querying: any): any;

    /**
     * Computes command label depending on a OS.
     * For Mac it will be cmd + `key` and for the rest of the World it
     * will be ctrl + `key`.
     *
     * @param key The key combination as a sufix after the command key
     * @returns Full command to display in command label.
     */
    _computeA11yCommand(key: String|null): String|null;

    /**
     * Handler for the `tap` event on the item.
     */
    _openProject(e: any): void;

    /**
     * Toggles opened project details.
     */
    _toggleOpen(e: ClickEvent|null): void;

    /**
     * Handler for the `selected-project-changed` event
     */
    _selectedProjectHandler(e: any): void;
  }
}

interface HTMLElementTagNameMap {
  "projects-menu": UiElements.ProjectsMenu;
}
